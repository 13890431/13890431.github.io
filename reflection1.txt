
Reflection 1: Principles of Sustainability to Create Viable Systems
A sustainable system is one which is not only functional but demonstrates resilience, efficacy and
long term viability. In a field as evolving as software where new technological overhauls always feel
imminent it cannot be more important to constantly consider and judge our systems and how they
reflect these criteria.
Resilience is often overlooked in a world of minimum viable products, vibe coded prototypes and data
breaches. It is the fundamental way our systems can stand-up to scrutiny and bounce back from
issues.
Efficacy is more than just time-complexity or power usage; it is the ability for a system to achieve its
goals without hindrance.
Viability: the readiness of a system for use today and in the future.
In my internship with Optik as part of my wider project I was tasked with automating the processing
and uploading of client data into a format that would enable easier access and visualization. I would
constantly find issues; this file had too many 0s in its id field, this size is in the wrong measurement
and now messes up my calculations amongst so many more it could fill a novel. Instead of ignoring
these errors I would fix them, after all how is my system going to demonstrate any value if it breaks
from a single misplaced keystroke. Initially this was going in and identifying the individual faults and
putting a bandaid on them. Eventually though a sort of epiphany came over me to which would seem
common sense to others that instead of trying to cover the blemishes in my code I should try to
develop my systems in a fashion that is more encompassing of these edge cases and can finally
stand the scrutiny of millimeter measurements.
And, so I went back and wrote it from scratch. I understood the requirements of the system better and
afforded to be conscious of all edge cases and reasonable risks during the design of the system itself.
Suddenly, instead of needing 40 different cases to block a file upload for a user I can identify and
resolve these issues during the processing of the file itself, boosting the efficiency of the user’s
experience. The system began seeing use much earlier than we anticipated and I was extremely
nervous, sure it worked when I used it but what if it doesn’t when they do, what if I didn’t catch
everything.
And maybe it doesn’t catch everything (it is truly hard to say) but it's been a month and I have yet to
receive a panicked email which maybe isn’t long term viability sure but it’s something.
Sriraman, G., & Raghunathan, S concluded in their exploration of sustainable software development
the necessity to “assess current practices, set goals, identify opportunities, develop an action plan,
monitor, and measure progress, and iterate and improve.” and it is easy to draw parallels with my
personal experience with the flaws in my “current practice” of individually fixing every error with my
flawed system to instead “identify the opportunity” to create a more robust and whole fuel system
where I acted and iterated to make a more sustainable system.
This experience helped me to realise the value of the consideration of sustainability within the
development of systems to create better software that is functional for real world use.
Source;
Sriraman, G., & Raghunathan, S. (2023). A Systems Thinking Approach to Improve Sustainability in
Software Engineering—A Grounded Capability Maturity Framework. Sustainability, 15(11), 8766.
https://doi.org/10.3390/su15118766